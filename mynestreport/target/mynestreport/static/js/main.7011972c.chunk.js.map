{"version":3,"sources":["service/thermostatDataService.js","component/NestDataHeatmap.jsx","App.js","reportWebVitals.js","index.js"],"names":["NESTDATASERVICE_API_URL","name","axios","get","NestDataHeatmap","props","state","heatMapData","chartEvents","ThermostatDataService","retrieveAllThermostatData","then","response","thermostats","Array","from","data","_embedded","console","log","page","forEach","element","heatMapDataRow","timeRange","Caption","Moment","startTs","format","endTs","cycles","length","chartData","type","id","cycle","chartDataRow","push","captionText","duration","startTime","toDate","endTime","setState","eventName","callback","chartWrapper","getChart","getSelection","paging","pageSize","size","pageCount","totalPages","currentPage","number","itemCount","totalElements","pageNumber","this","currentPageNumber","items","map","trigger","width","height","chartType","loader","rootProps","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","onChange","handlePageChange","bind","React","Component","TimeLineDataMap","App","className","class","basename","process","to","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7011972c.chunk.js","sourcesContent":["/**\r\n * Thermostat data service - Query the backend Mongo DB for \r\n * thermostat data\r\n */\r\n\r\nimport axios from 'axios'\r\n\r\nconst BASE_API_URL = 'http://localhost:8085'\r\nconst NESTDATASERVICE_API_URL = `${BASE_API_URL}/mynest/thermostats`\r\n\r\nclass ThermostatDataService {\r\n\r\n    retrieveAllThermostatData(name) {\r\n        return axios.get(`${NESTDATASERVICE_API_URL}`);\t\t\r\n    }\r\n}\r\n\r\nexport default new ThermostatDataService()","/**\r\n * Render the thermostat data for every day included in the\r\n * Nest data report\r\n */\r\nimport '../App.css';\r\nimport React from 'react';\r\nimport Moment from 'moment';\r\nimport ThermostatDataService from '../service/thermostatDataService'\r\nimport Collapsible from 'react-collapsible';\r\nimport Chart from \"react-google-charts\";\r\nimport Pagination from \"react-js-pagination\";\r\n\r\nclass NestDataHeatmap extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = { heatMapData: [], chartEvents: [] };\r\n\r\n\t\tThermostatDataService.retrieveAllThermostatData()\r\n\t\t\t.then(response => {\r\n\r\n\t\t\t\tconst thermostats = Array.from(response.data._embedded.thermostats);\r\n\t\t\t\tconsole.log(\"Paging info \", response.data.page);\r\n\r\n\t\t\t\tvar heatMapData = [];\r\n\r\n\t\t\t\tthermostats.forEach(element => {\r\n\t\t\t\t\tvar heatMapDataRow = {};\r\n\t\t\t\t\theatMapDataRow.timeRange = {};\r\n\t\t\t\t\theatMapDataRow.timeRange.Caption = Moment(element.startTs).format('YYYY-MM-DD') + ' to ' + Moment(element.endTs).format('YYYY-MM-DD');\r\n\r\n\t\t\t\t\tconst cycles = Array.from(element.cycles);\r\n\r\n\t\t\t\t\tif (cycles.length > 0) {\r\n\t\t\t\t\t\theatMapDataRow.chartData = [\r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t{ type: 'string', id: 'Caption' },\r\n\t\t\t\t\t\t\t\t{ type: 'string', id: 'Duration' },\r\n\t\t\t\t\t\t\t\t{ type: 'date', id: 'StartTime' },\r\n\t\t\t\t\t\t\t\t{ type: 'date', id: 'EndTime' }\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t];\r\n\r\n\t\t\t\t\t\tcycles.forEach(cycle => {\r\n\t\t\t\t\t\t\tvar chartDataRow = [];\r\n\t\t\t\t\t\t\tchartDataRow.push(cycle.captionText);\r\n\t\t\t\t\t\t\tchartDataRow.push(cycle.duration);\r\n\t\t\t\t\t\t\tchartDataRow.push(Moment(cycle.startTime).toDate());\r\n\t\t\t\t\t\t\tchartDataRow.push(Moment(cycle.endTime).toDate());\r\n\t\t\t\t\t\t\theatMapDataRow.chartData.push(chartDataRow);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\theatMapDataRow.chartData = null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\theatMapData.push(heatMapDataRow);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\theatMapData: heatMapData,\r\n\t\t\t\t\tchartEvents: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\teventName: \"select\",\r\n\t\t\t\t\t\t\tcallback({ chartWrapper }) {\r\n\t\t\t\t\t\t\t\tconsole.log(\"Selected \", chartWrapper.getChart().getSelection());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t],\r\n\t\t\t\t\tpaging: {\r\n\t\t\t\t\t\tpageSize: response.data.page.size,\r\n\t\t\t\t\t\tpageCount: response.data.page.totalPages,\r\n\t\t\t\t\t\tcurrentPage: response.data.page.number,\r\n\t\t\t\t\t\titemCount: response.data.page.totalElements\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconsole.log(\"Service data\", thermostats);\r\n\t\t\t\tconsole.log(\"Heat map data\", heatMapData);\r\n\t\t\t}\r\n\t\t\t);\r\n\t}\r\n\t\r\n\thandlePageChange(pageNumber) {\r\n    \tconsole.log('active page is', pageNumber);\r\n    \tthis.setState({currentPageNumber: pageNumber});\r\n  \t}\r\n\r\n\trender() {\r\n\r\n\t\t//Create a list of components to render from the heatmap data\r\n\t\tconst items = this.state.heatMapData.map(function(element) {\r\n\t\t\t//Group heat map data by dates\t\t\t\r\n\t\t\treturn <Collapsible trigger={element.timeRange.Caption}>\r\n\r\n\t\t\t\t{\r\n\t\t\t\t\telement.chartData ?\r\n\t\t\t\t\t\t<Chart\r\n\t\t\t\t\t\t\twidth={'100%'}\r\n\t\t\t\t\t\t\theight={'100%'}\r\n\t\t\t\t\t\t\tchartType=\"Timeline\"\r\n\t\t\t\t\t\t\tloader={<div>Loading Chart</div>}\r\n\t\t\t\t\t\t\tdata={element.chartData}\r\n\t\t\t\t\t\t\trootProps={{ 'data-testid': '10' }}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t: <div>No data available!</div>\r\n\t\t\t\t}\r\n\r\n\t\t\t</Collapsible>;\r\n\t\t});\r\n\t\t//return the components to be rendered\r\n\t\treturn (<div>\r\n\t\t\t<div>{items}</div>\r\n\t\t\t<div>\r\n\t\t\t\t<Pagination\r\n\t\t\t\t\tactivePage={this.state.currentPageNumber}\r\n\t\t\t\t\titemsCountPerPage={this.state.pageCount}\r\n\t\t\t\t\ttotalItemsCount={this.state.itemCount}\r\n\t\t\t\t\tpageRangeDisplayed={this.state.pageSize}\r\n\t\t\t\t\tonChange={this.handlePageChange.bind(this)}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>)\r\n\t}\r\n}\r\n\r\nexport default NestDataHeatmap;\r\n","\nimport './App.css';\nimport React, { Component } from 'react';\nimport {\n\tBrowserRouter,\n\tLink,\n\tRoute,\n\tSwitch\n} from 'react-router-dom';\nimport NestDataHeatmap from './component/NestDataHeatmap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div class=\"container\">\n\t\t\t\t\t<BrowserRouter basename={process.env.REACT_APP_ROUTER_BASE || ''}>\n\t\t\t\t\t\t<ul class=\"list-group\">\n\t\t\t\t\t\t\t<li class=\"list-group-item\">\n\t\t\t\t\t\t\t\t<Link to=\"/\">Nest Data Map for 2119</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route path=\"/\" component={TimeLineDataMap} />\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</BrowserRouter>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction TimeLineDataMap() {\n\treturn (\n\t\t<div>\n\t\t\t<NestDataHeatmap />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}