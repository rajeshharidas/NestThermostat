{"version":3,"sources":["service/thermostatDataService.js","component/NestDataHeatmap.jsx","service/sensorDataService.js","component/SensorDataChart.jsx","service/liveFeedService.js","component/LiveFeedChart.jsx","App.js","reportWebVitals.js","index.js"],"names":["NESTDATASERVICE_API_URL","page","axios","get","NestDataHeatmap","props","state","heatMapData","chartEvents","paging","pageSize","currentPage","itemCount","pageCount","loadThermostatData","bind","pageNumber","ThermostatDataService","retrieveAllThermostatData","then","response","thermostats","Array","from","data","values","forEach","element","heatMapDataRow","timeRange","Caption","Moment","startTs","format","endTs","cycles","length","chartData","type","id","cycle","chartDataRow","push","captionText","duration","startTime","toDate","endTime","pagingInfo","size","totalPages","number","totalElements","setState","eventName","callback","chartWrapper","console","log","getChart","getSelection","this","currentPageNumber","items","map","trigger","width","height","chartType","loader","rootProps","itemClass","linkClass","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","onChange","handlePageChange","React","Component","SENSORDATASERVICE_API_URL","SensorDataChart","sensorMapData","loadSensorData","SensorDataService","retrieveAllSensorData","sensordatas","sensorDataArray","label","datetime","timestamp","temp","parseFloat","avgTemp","avgHumidity","options","chart","title","hAxis","gridlines","count","vAxis","explorer","actions","axis","keepInBounds","maxZoomIn","crosshair","color","series","0","curveType","1","axes","y","Temps","Humidity","BASE_API_URL","HVACDATASERVICE_API_URL","require","Highcharts","LiveFeedChart","sensorTempData","sensorHumidityData","LiveFeedService","retrieveAllHvacData","sensorTempArray","sensorHumidityArray","chartTempDataRow","timeofcapture","temperature","chartHumidityDataRow","humidity","zoomType","panning","panKey","text","xAxis","yAxis","name","highcharts","ref","chartComponent","TimeLineDataMap","SensorDataMap","LiveDataMap","App","className","class","basename","process","to","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e5cf09f.chunk.js","sourcesContent":["/**\r\n * Thermostat data service - Query the backend Mongo DB for \r\n * thermostat data\r\n */\r\n\r\nimport axios from 'axios'\r\n\r\nconst BASE_API_URL = 'http://rhwin8srv:8190'\r\nconst NESTDATASERVICE_API_URL = `${BASE_API_URL}/mynest/api/thermostats`\r\n\r\nclass ThermostatDataService {\r\n\r\n    retrieveAllThermostatData(page) {\r\n        return axios.get(`${NESTDATASERVICE_API_URL}?page=` + page);\t\t\r\n    }\r\n}\r\n\r\nexport default new ThermostatDataService()","/**\r\n * Render the thermostat data for every day included in the\r\n * Nest data report\r\n */\r\nimport '../App.css';\r\nimport React from 'react';\r\nimport Moment from 'moment';\r\nimport ThermostatDataService from '../service/thermostatDataService'\r\nimport Collapsible from 'react-collapsible';\r\nimport Chart from \"react-google-charts\";\r\nimport Pagination from \"react-js-pagination\";\r\n\r\nclass NestDataHeatmap extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = { heatMapData: [], chartEvents: [], paging:{pageSize:0, currentPage:1, itemCount:0, pageCount:0 } };\r\n\t\tthis.loadThermostatData = this.loadThermostatData.bind(this);\r\n\t\tthis.loadThermostatData(0);\r\n\t}\r\n\t\r\n\tloadThermostatData(pageNumber) {\r\n\t\tThermostatDataService.retrieveAllThermostatData(pageNumber)\r\n\t\t\t.then(response => {\r\n\r\n\t\t\t\tconst thermostats = Array.from(response.data.values);\r\n\r\n\t\t\t\tvar heatMapData = [];\r\n\r\n\t\t\t\tthermostats.forEach(element => {\r\n\t\t\t\t\tvar heatMapDataRow = {};\r\n\t\t\t\t\theatMapDataRow.timeRange = {};\r\n\t\t\t\t\theatMapDataRow.timeRange.Caption = Moment(element.startTs).format('YYYY-MM-DD') + ' to ' + Moment(element.endTs).format('YYYY-MM-DD');\r\n\r\n\t\t\t\t\tconst cycles = Array.from(element.cycles);\r\n\r\n\t\t\t\t\tif (cycles.length > 0) {\r\n\t\t\t\t\t\theatMapDataRow.chartData = [\r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t{ type: 'string', id: 'Caption' },\r\n\t\t\t\t\t\t\t\t{ type: 'string', id: 'Duration' },\r\n\t\t\t\t\t\t\t\t{ type: 'date', id: 'StartTime' },\r\n\t\t\t\t\t\t\t\t{ type: 'date', id: 'EndTime' }\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t];\r\n\r\n\t\t\t\t\t\tcycles.forEach(cycle => {\r\n\t\t\t\t\t\t\tvar chartDataRow = [];\r\n\t\t\t\t\t\t\tchartDataRow.push(cycle.captionText);\r\n\t\t\t\t\t\t\tchartDataRow.push(cycle.duration);\r\n\t\t\t\t\t\t\tchartDataRow.push(Moment(cycle.startTime).toDate());\r\n\t\t\t\t\t\t\tchartDataRow.push(Moment(cycle.endTime).toDate());\r\n\t\t\t\t\t\t\theatMapDataRow.chartData.push(chartDataRow);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\theatMapDataRow.chartData = null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\theatMapData.push(heatMapDataRow);\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar pagingInfo = {\r\n\t\t\t\t\t\tpageSize: response.data.size,\r\n\t\t\t\t\t\tpageCount: response.data.totalPages,\r\n\t\t\t\t\t\tcurrentPage: response.data.number+1,\r\n\t\t\t\t\t\titemCount: response.data.totalElements\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\theatMapData: heatMapData,\r\n\t\t\t\t\tchartEvents: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\teventName: \"select\",\r\n\t\t\t\t\t\t\tcallback({ chartWrapper }) {\r\n\t\t\t\t\t\t\t\tconsole.log(\"Selected \", chartWrapper.getChart().getSelection());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t],\r\n\t\t\t\t\tpaging: pagingInfo\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconsole.log(\"Service data\", thermostats);\r\n\t\t\t\tconsole.log(\"Heat map data\", heatMapData);\r\n\t\t\t\tconsole.log(\"Paging data\", pagingInfo);\r\n\t\t\t}\r\n\t\t\t);\r\n\t}\r\n\t\r\n\thandlePageChange(pageNumber) {\r\n    \tconsole.log('active page is', pageNumber);\r\n    \tthis.setState({currentPageNumber: pageNumber});\r\n\t\tthis.loadThermostatData(pageNumber-1);\r\n  \t}\r\n\r\n\trender() {\r\n\r\n\t\t//Create a list of components to render from the heatmap data\r\n\t\tconst items = this.state.heatMapData.map(function(element) {\r\n\t\t\t//Group heat map data by dates\t\t\t\r\n\t\t\treturn <Collapsible trigger={element.timeRange.Caption} >\r\n\r\n\t\t\t\t{\r\n\t\t\t\t\telement.chartData ?\r\n\t\t\t\t\t\t<Chart\r\n\t\t\t\t\t\t\twidth={'100%'}\r\n\t\t\t\t\t\t\theight={'100%'}\r\n\t\t\t\t\t\t\tchartType=\"Timeline\"\r\n\t\t\t\t\t\t\tloader={<div>Loading Chart</div>}\r\n\t\t\t\t\t\t\tdata={element.chartData}\r\n\t\t\t\t\t\t\trootProps={{ 'data-testid': '10' }}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t: <div>No data available!</div>\r\n\t\t\t\t}\r\n\r\n\t\t\t</Collapsible>;\r\n\t\t});\r\n\t\t//return the components to be rendered\r\n\t\treturn (<div>\r\n\t\t\t<div>{items}</div>\r\n\t\t\t<div>\r\n\t\t\t\t<Pagination itemClass=\"page-item\" linkClass=\"page-link\"\r\n\t\t\t\t\tactivePage={this.state.paging.currentPage}\r\n\t\t\t\t\titemsCountPerPage={20}\r\n\t\t\t\t\ttotalItemsCount={this.state.paging.itemCount}\r\n\t\t\t\t\tpageRangeDisplayed={25}\r\n\t\t\t\t\tonChange={this.handlePageChange.bind(this)}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>)\r\n\t}\r\n}\r\n\r\nexport default NestDataHeatmap;\r\n","/**\r\n * Thermostat data service - Query the backend Mongo DB for \r\n * thermostat data\r\n */\r\n\r\nimport axios from 'axios'\r\n\r\nconst BASE_API_URL = 'http://rhwin8srv:8190'\r\nconst SENSORDATASERVICE_API_URL = `${BASE_API_URL}/mynest/api/sensordata`\r\n\r\nclass SensorDataService {\r\n\r\n    retrieveAllSensorData(page,size) {\r\n        return axios.get(`${SENSORDATASERVICE_API_URL}?sort=desc&page=` + page + `&size=` + size);\t\t\r\n    }\r\n}\r\n\r\nexport default new SensorDataService()","/**\r\n * Render the thermostat data for every day included in the\r\n * Nest data report\r\n */\r\nimport '../App.css';\r\nimport Moment from 'moment';\r\nimport React from 'react';\r\nimport SensorDataService from '../service/sensorDataService'\r\nimport Chart from \"react-google-charts\";\r\nimport Pagination from \"react-js-pagination\";\r\n\r\nclass SensorDataChart extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tsensorMapData: [\r\n\t\t\t\t[\r\n\t\t\t\t\t{ type: 'string', id: 'Date' },\r\n\t\t\t\t\t{ type: 'number', id: 'Temperature' },\r\n\t\t\t\t\t{ type: 'number', id: 'Humidity' }\r\n\t\t\t\t]\r\n\t\t\t],\r\n\t\t\tpaging: { pageSize: 0, currentPage: 1, itemCount: 0, pageCount: 0 }\r\n\t\t};\r\n\t\tthis.loadSensorData = this.loadSensorData.bind(this);\r\n\t\tthis.loadSensorData(0);\r\n\t}\r\n\r\n\tloadSensorData(pageNumber) {\r\n\t\tSensorDataService.retrieveAllSensorData(pageNumber, 100)\r\n\t\t\t.then(response => {\r\n\r\n\t\t\t\tconst sensordatas = Array.from(response.data.values);\r\n\r\n\t\t\t\tvar sensorDataArray = [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t{ type: 'date', id: 'Date', label: 'Date' },\r\n\t\t\t\t\t\t{ type: 'number', id: 'Temperature', label: 'Temperature' },\r\n\t\t\t\t\t\t{ type: 'number', id: 'Humidity', label: 'Humidity' }\r\n\t\t\t\t\t]\r\n\t\t\t\t];\r\n\r\n\t\t\t\tsensordatas.forEach(element => {\r\n\r\n\t\t\t\t\tvar chartDataRow = [];\r\n\t\t\t\t\tvar datetime = Moment(element.timestamp).toDate();\r\n\t\t\t\t\tchartDataRow.push(datetime);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar temp = parseFloat(element.avgTemp);\r\n\t\t\t\t\ttemp = (temp * (9/5)) + 32; \r\n\t\t\t\t\tconsole.log(temp);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\tchartDataRow.push(temp);\r\n\t\t\t\t\tchartDataRow.push(element.avgHumidity);\r\n\t\t\t\t\tif (element.avgTemp !== \"\" && element.avgHumidity !== \"\")\r\n\t\t\t\t\t\tsensorDataArray.push(chartDataRow);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tvar pagingInfo = {\r\n\t\t\t\t\tpageSize: response.data.size,\r\n\t\t\t\t\tpageCount: response.data.totalPages,\r\n\t\t\t\t\tcurrentPage: response.data.number + 1,\r\n\t\t\t\t\titemCount: response.data.totalElements\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tsensorMapData: sensorDataArray,\r\n\t\t\t\t\tpaging: pagingInfo\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconsole.log(\"Service data\", sensordatas);\r\n\t\t\t\tconsole.log(\"Heat map data\", sensorDataArray);\r\n\t\t\t\tconsole.log(\"Paging data\", pagingInfo);\r\n\t\t\t}\r\n\t\t\t);\r\n\t}\r\n\r\n\thandlePageChange(pageNumber) {\r\n\t\tconsole.log('active page is', pageNumber);\r\n\t\tthis.setState({ currentPageNumber: pageNumber });\r\n\t\tthis.loadSensorData(pageNumber - 1);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Chart\r\n\t\t\t\t\t\twidth={'100%'}\r\n\t\t\t\t\t\theight={'100%'}\r\n\t\t\t\t\t\tchartType=\"LineChart\"\r\n\t\t\t\t\t\tloader={<div>Loading Chart</div>}\r\n\t\t\t\t\t\tdata={this.state.sensorMapData}\r\n\t\t\t\t\t\toptions={{\r\n\t\t\t\t\t\t\tchart: {\r\n\t\t\t\t\t\t\t\ttitle:\r\n\t\t\t\t\t\t\t\t\t'Average Temperatures and Humidity Throughout the Year',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\twidth: 1000,\r\n\t\t\t\t\t\t\theight: 800,\r\n\t\t\t\t\t\t\thAxis: {\r\n\t\t\t\t\t\t\t\tformat: 'MM/dd/yyyy hh:mm a',\r\n\t\t\t\t\t\t\t\tgridlines: { count: 15 },\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvAxis: {\r\n\t\t\t\t\t\t\t\ttitle: 'Sensor',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\texplorer: {\r\n\t\t\t\t\t\t\t\tactions: ['dragToZoom', 'rightClickToReset'],\r\n\t\t\t\t\t\t\t\taxis: 'horizontal',\r\n\t\t\t\t\t\t\t\tkeepInBounds: true,\r\n\t\t\t\t\t\t\t\tmaxZoomIn: 8.0\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tcrosshair: {\r\n\t\t\t\t\t\t\t\tcolor: '#000',\r\n\t\t\t\t\t\t\t\ttrigger: 'selection'\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tseries: {\r\n\t\t\t\t\t\t\t\t0: { axis: 'Temps', curveType: 'function' },\r\n\t\t\t\t\t\t\t\t1: { axis: 'Humidity', curveType: 'function' },\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\taxes: {\r\n\t\t\t\t\t\t\t\t// Adds labels to each axis; they don't have to match the axis names.\r\n\t\t\t\t\t\t\t\ty: {\r\n\t\t\t\t\t\t\t\t\tTemps: { label: 'Temps (Celsius)' },\r\n\t\t\t\t\t\t\t\t\tHumidity: { label: 'Humidity' },\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\trootProps={{ 'data-testid': '2' }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Pagination itemClass=\"page-item\" linkClass=\"page-link\"\r\n\t\t\t\t\t\tactivePage={this.state.paging.currentPage}\r\n\t\t\t\t\t\titemsCountPerPage={100}\r\n\t\t\t\t\t\ttotalItemsCount={this.state.paging.itemCount}\r\n\t\t\t\t\t\tpageRangeDisplayed={25}\r\n\t\t\t\t\t\tonChange={this.handlePageChange.bind(this)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default SensorDataChart;\r\n","/**\r\n * Thermostat data service - Query the backend Mongo DB for \r\n * thermostat data\r\n */\r\n\r\nimport axios from 'axios'\r\n\r\nconst BASE_API_URL = 'http://rhwin8srv:8190'\r\nconst SENSORDATASERVICE_API_URL = `${BASE_API_URL}/feedstore/dataapi/temperaturedata`\r\nconst HVACDATASERVICE_API_URL = `${BASE_API_URL}/feedstore/dataapi/hvacdata`\r\n\r\nclass LiveFeedService {\r\n\r\n    retrieveAllSensorData() {\r\n        return axios.get(`${SENSORDATASERVICE_API_URL}`);\t\t\r\n    }\r\n    \r\n     retrieveAllHvacData() {\r\n        return axios.get(`${HVACDATASERVICE_API_URL}`);\t\t\r\n    }\r\n}\r\n\r\nexport default new LiveFeedService()","/**\r\n * Render the thermostat data for every day included in the\r\n * Nest data report\r\n */\r\nimport '../App.css';\r\nimport Moment from 'moment';\r\nimport React from 'react';\r\nimport LiveFeedService from '../service/liveFeedService'\r\nimport Highcharts from \"highcharts/highstock\";\r\nimport HighchartsReact from 'highcharts-react-official'\r\n\r\nrequire(\"highcharts/indicators/indicators\")(Highcharts);\r\nrequire(\"highcharts/indicators/pivot-points\")(Highcharts);\r\nrequire(\"highcharts/indicators/macd\")(Highcharts);\r\nrequire(\"highcharts/modules/exporting\")(Highcharts);\r\n\r\n\r\nclass LiveFeedChart extends React.Component {\r\n\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tsensorTempData: [\r\n\t\t\t],\r\n\t\t\tsensorHumidityData: [\r\n\t\t\t]\r\n\r\n\t\t};\r\n\t\tthis.loadSensorData = this.loadSensorData.bind(this);\r\n\t\tthis.loadSensorData();\r\n\t}\r\n\r\n\tloadSensorData() {\r\n\t\tLiveFeedService.retrieveAllHvacData()\r\n\t\t\t.then(response => {\r\n\r\n\t\t\t\tconst sensordatas = Array.from(response.data.values);\r\n\r\n\t\t\t\tvar sensorTempArray = [\r\n\t\t\t\t];\r\n\r\n\t\t\t\tvar sensorHumidityArray = [\r\n\t\t\t\t];\r\n\r\n\t\t\t\tsensordatas.forEach(element => {\r\n\r\n\t\t\t\t\tvar chartTempDataRow = [];\r\n\t\t\t\t\tvar datetime = Moment(element.timeofcapture).toDate();\r\n\t\t\t\t\tchartTempDataRow.push(datetime);\r\n\r\n\t\t\t\t\tvar temp = parseFloat(element.temperature);\r\n\t\t\t\t\ttemp = (temp * (9 / 5)) + 32;\r\n\t\t\t\t\tconsole.log(temp);\r\n\r\n\t\t\t\t\tchartTempDataRow.push(temp);\r\n\t\t\t\t\tif (element.temperature !== \"\")\r\n\t\t\t\t\t\tsensorTempArray.push(chartTempDataRow);\r\n\r\n\t\t\t\t\tvar chartHumidityDataRow = [];\r\n\t\t\t\t\tchartHumidityDataRow.push(datetime);\r\n\r\n\t\t\t\t\tchartHumidityDataRow.push(parseFloat(element.humidity));\r\n\r\n\t\t\t\t\tif (element.humidity !== \"\")\r\n\t\t\t\t\t\tsensorHumidityArray.push(chartHumidityDataRow);\r\n\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tsensorTempData: sensorTempArray,\r\n\t\t\t\t\tsensorHumidityData: sensorHumidityArray\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tconsole.log(\"Service data\", sensordatas);\r\n\t\t\t\tconsole.log(\"Temperature data map\", sensorTempArray);\r\n\t\t\t\tconsole.log(\"Humidity data map\", sensorHumidityArray);\r\n\t\t\t}\r\n\t\t\t);\r\n\t}\r\n\t\r\n\tloadHvacData() {\r\n\t\t\r\n\t}\r\n\r\n\thandlePageChange() {\r\n\t\tthis.loadSensorData();\r\n\t}\r\n\r\n\trender() {\r\n\t\t\r\n\t\t var options = {\r\n\t\t\t\tchart: {\r\n\t\t\t\t\theight: (9 / 16 * 100) + '%',\r\n\t\t\t\t\ttype: 'line',\r\n\t\t\t\t\tzoomType: 'x',\r\n\t\t\t\t\tpanning: true,\r\n        \t\t\tpanKey: 'shift'\r\n\t\t\t\t},\r\n\t\t\t\ttitle: {\r\n\t\t\t\t\ttext: \"Temperature and Humity around the year\"\r\n\t\t\t\t},\r\n\t\t\t\txAxis: {\r\n\t\t\t\t\ttitle: { text: \"Time\" },\r\n\t\t\t\t\ttype: \"datetime\"\r\n\t\t\t\t},\r\n\t\t\t\tyAxis: {\r\n\t\t\t\t\ttitle: { text: \"Temperature/Humidity\" },\r\n\t\t\t\t\ttype: \"linear\"\r\n\t\t\t\t},\r\n\t\t\t\tseries: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid: \"tempseries\",\r\n\t\t\t\t\t\tname: \"Temperature\",\r\n\t\t\t\t\t\tdata: this.state.sensorTempData\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid: \"humidityseries\",\r\n\t\t\t\t\t\tname: \"Humidity\",\r\n\t\t\t\t\t\tdata: this.state.sensorHumidityData\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t};\r\n\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<HighchartsReact\t\t\t\t\t\t\r\n\t\t\t\t\t\thighcharts={Highcharts}\r\n\t\t\t\t\t\tref={this.chartComponent}\r\n\t\t\t\t\t\toptions={options}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default LiveFeedChart;\r\n","\r\nimport './App.css';\r\nimport React, { Component } from 'react';\r\nimport {\r\n\tBrowserRouter,\r\n\tLink,\r\n\tRoute\r\n} from 'react-router-dom';\r\nimport {Tabs, TabList, TabPanel, Tab } from 'react-tabs';\r\nimport NestDataHeatmap from './component/NestDataHeatmap';\r\nimport SensorDataChart from './component/SensorDataChart';\r\nimport LiveFeedChart from './component/LiveFeedChart';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass App extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<div class=\"container\">\r\n\r\n\t\t\t\t\t<BrowserRouter basename={process.env.REACT_APP_ROUTER_BASE || ''}>\r\n\t\t\t\t\t\t<Tabs>\r\n\t\t\t\t\t\t\t<TabList class='react-tabs__tab-list'>\r\n\t\t\t\t\t\t\t\t<Tab class='react-tabs__tab'><Link to=\"/\">Time Series</Link></Tab>\r\n\t\t\t\t\t\t\t\t<Tab class='react-tabs__tab'><Link to=\"/sensor\">Sensor Chart</Link></Tab>\r\n\t\t\t\t\t\t\t\t<Tab class='react-tabs__tab'><Link to=\"/live\">Live Chart</Link></Tab>\r\n\t\t\t\t\t\t\t</TabList>\r\n\r\n\t\t\t\t\t\t\t<TabPanel>\r\n\t\t\t\t\t\t\t\t<Route path=\"/\" component={TimeLineDataMap} />\r\n\t\t\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t\t\t<TabPanel>\r\n\t\t\t\t\t\t\t\t<Route path=\"/sensor\" component={SensorDataMap} />\r\n\t\t\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t\t\t<TabPanel>\r\n\t\t\t\t\t\t\t\t<Route path=\"/live\" component={LiveDataMap} />\r\n\t\t\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t\t</Tabs>\t\t\t\t\t\r\n\t\t\t\t\t</BrowserRouter>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction TimeLineDataMap() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<NestDataHeatmap />\r\n\t\t</div>\r\n\t);\r\n}\r\nfunction SensorDataMap() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<SensorDataChart/>\r\n\t\t</div>\r\n\t);\r\n}\r\nfunction LiveDataMap() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<LiveFeedChart/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}